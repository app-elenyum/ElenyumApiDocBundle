<html>
<head>
    <meta charset="utf-8">
    <title>Elenyum editor</title>

    {% block stylesheets %}
        {{ elenyumAsset(assets_mode, 'edit/style/primevue.min.css') }}
        {{ elenyumAsset(assets_mode, 'edit/style/primeicons.css') }}
        {{ elenyumAsset(assets_mode, 'edit/style/primeflex.css') }}
        {{ elenyumAsset(assets_mode, 'edit/style/theme.css') }}
    {% endblock stylesheets %}

    {% block javascripts %}
        {# https://unpkg.com/browse/primevue@^3/dialog/dialog.min.js #}
        {{ elenyumAsset(assets_mode, 'edit/js/axios.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/vue.global.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/core.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/slider.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/multiselect.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/card.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/panel.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/divider.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/menu.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/tag.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/dialog.min.js') }}
        {{ elenyumAsset(assets_mode, 'edit/js/blockui.min.js') }}
    {% endblock javascripts %}

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #app {
            margin: 5px;
        }

        div.p-blockui-container {
            min-height: 100%;
        }

        .ad-item {
            padding: 5px;
            margin-bottom: 10px;
        }

        .ad-item-multiselesct {
            width: 100%;
        }

        .ad-dropdown {
            width: 100%;
        }

        .ad-text {
            width: 100%;
        }

        .p-float-label {
            margin-top: 30px;
        }


        .entity-desc > .entity-desc-item {
            position: relative;
            border-bottom: #dfdfdf 1px solid;
            padding: 0 0 5px 5px;
            font-size: 0.9em;
            margin-bottom: 10px;
        }

        .entity-desc > .entity-desc-item > .item-icon {
            padding: 0 5px 0 0;
            font-size: 0.8em;
            position: absolute;
            top: 5px;
        }

        .entity-desc > .entity-desc-item > .entity-desc-text {
            position: relative;
            left: 20px;
        }

        .entity-desc > .entity-desc-item .item-name {
            display: block;
        }

        .entity-desc > .entity-desc-item .item-groups {
            font-size: 0.5em;
            display: block;
            padding: 3px 0;
        }

        .entity-title {
            word-wrap: break-word;
            word-break: break-all;
            display: block;
            position: relative;
        }

        .settings.p-card > .p-card-body {
            padding: 0;
        }

        .settings {
            position: absolute;
            background: #f8f9fa;
            height: 100%;
            width: 23%;
            border: none;
            box-shadow: 0 2px 1px -1px rgb(0 0 0 / 8%), 3px 2px 10px 0 rgb(0 0 0 / 8%), 0 1px 3px 0 rgb(0 0 0 / 8%);
            border-radius: unset;
            padding: 0;
        }

        .settings-title {
            display: block;
            background: #2196f3;
            color: white;
            padding: 6px 10px;
            width: 100%;
        }

        .validator-card {
            box-shadow: none;
        }

        .validator-card .p-card-title {
            font-size: 1rem;
            font-weight: 400;
        }

        .validator-card .p-card-content {
            padding: 0;
        }

        .button-add-validator, .button-add-role {
            width: 1.5rem !important;
            height: 1.5rem !important;
            float: right;
        }

        .button-remove-item {
            float: right;
            width: 1.7rem !important;
            height: 1.7rem !important;
            bottom: 15px;
        }

        .button-remove-validator {
            float: right;
            bottom: 10px;
        }
    </style>

</head>

<body>
<div id="app">
    <p-blockui :blocked="blockedApp">
        <div class="grid">
            <div class="col-3" style="padding: 0">
                <p-card class="settings" role="region">
                    <template #title>
                        <div class="p-inputgroup" style="border-radius: unset">
                            <div class="settings-title">ELENYUM</div>
                            <p-button class="p-panel-header-icon p-link" @click="onSave()">
                                <span class="pi pi-save"></span>
                            </p-button>
                            <p-button class="p-panel-header-icon p-link" @click="settingToggle($event)">
                                <span class="pi pi-cog"></span>
                            </p-button>
                        </div>
                    </template>
                    <template #content>
                        <!--  Если выбрана колонка   -->
                        <div class="ad-item" :hidden="selected != 'column'">
                            <p-button icon="pi pi-trash" @click="onRemoveColumn()"
                                      class="p-button-rounded p-button-danger p-button-outlined button-remove-item"></p-button>
                            <span class="p-float-label">
                            <p-inputtext id="ad-column-text-name" class="ad-text" type="text"
                                         v-model="columnEdit.name"></p-inputtext>
                            <label for="ad-text-name">Name column</label>
                        </span>
                            <span class="p-float-label">
                            <p-multiselect id="ad-item-multiselesct-groups" class="ad-item-multiselesct"
                                           v-model="columnEdit.group"
                                           :options="groups"
                                           placeholder="Select Groups"
                                           display="chip"></p-multiselect>
                            <label for="ad-item-multiselesct-groups">Groups</label>
                        </span>
                            <span class="p-float-label">
                            <p-dropdown id="ad-dropdown-type" class="ad-dropdown" v-model="columnEdit.column.type"
                                        :options="types" optionLabel="name" optionValue="code"
                                        @change="changeColumnType($event, columnEdit)"
                                        placeholder="Select a Type"></p-dropdown>
                            <label for="ad-dropdown-type">Type</label>
                        </span>
                            <template v-if="
                            columnEdit.column.type == 'ManyToMany' ||
                            columnEdit.column.type == 'ManyToOne' ||
                            columnEdit.column.type == 'OneToOne' ||
                            columnEdit.column.type == 'OneToMany'
                        ">
                            <span class="p-float-label">
                                <p-dropdown id="ad-dropdown-targetEntity" class="ad-dropdown"
                                            v-model="columnEdit.column.targetEntity"
                                            :options="targetEntity" optionLabel="name" optionValue="code"
                                            placeholder="Select a Type">
                                </p-dropdown>
                                <label for="ad-dropdown-targetEntity">Target entity</label>
                            </span>

                            </template>
                            <template
                                    v-if="columnEdit.column.type === 'ManyToMany' || columnEdit.column.type === 'OneToOne' || columnEdit.column.type === 'OneToMany' ">
                            <span class="p-float-label">
                                <p-dropdown id="ad-dropdown-mapped-by" class="ad-dropdown"
                                            v-model="columnEdit.column.mappedBy"
                                            :options="mappedBy" optionLabel="name" optionValue="code"
                                            placeholder="Select a Type"></p-dropdown>
                                <label for="ad-dropdown-mapped-by">Mapped by</label>
                            </span>
                            </template>

                            <template v-if="columnEdit.validator">
                                <h4>Validator
                                    <p-button icon="pi pi-plus"
                                              class="p-button-rounded p-button-outlined button-add-validator"
                                              @click="validatorToggle($event)"></p-button>
                                </h4>

                                <template class="mb-5" v-if="columnEdit.validator && columnEdit.validator.length">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            Length
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'length')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                        <template #content>
                                        <span class="p-float-label">
                                            <p-inputtext id="ad-min-valid" class="ad-text p-inputtext-sm" type="integer"
                                                         v-model="columnEdit.validator.length.min"></p-inputtext>
                                            <label for="ad-min-valid">Min length</label>
                                        </span>
                                            <span class="p-float-label">
                                            <p-inputtext id="ad-max-valid" class="ad-text p-inputtext-sm" type="integer"
                                                         v-model="columnEdit.validator.length.max"></p-inputtext>
                                            <label for="ad-max-valid">Max length</label>
                                        </span>
                                        </template>
                                    </p-card>
                                </template>
                                <template v-if="columnEdit.validator && columnEdit.validator.count">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            Count
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'count')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                        <template #content>
                                        <span class="p-float-label">
                                            <p-inputtext id="ad-min-count-valid" class="ad-text p-inputtext-sm"
                                                         type="integer"
                                                         v-model="columnEdit.validator.count.max"></p-inputtext>
                                            <label for="ad-min-count-valid">Min count</label>
                                        </span>
                                            <span class="p-float-label">
                                            <p-inputtext id="ad-max-count-valid" class="ad-text p-inputtext-sm"
                                                         type="integer"
                                                         v-model="columnEdit.validator.count.max"></p-inputtext>
                                            <label for="ad-max-count-valid">Max count</label>
                                        </span>
                                        </template>
                                    </p-card>
                                </template>
                                <template v-if="columnEdit.validator && columnEdit.validator.regex">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            Regex
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'regex')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                        <template #content>
                                        <span class="p-float-label">
                                            <p-inputtext id="ad-regex-valid" class="ad-text p-inputtext-sm" type="text"
                                                         v-model="columnEdit.validator.regex.pattern"></p-inputtext>
                                            <label for="ad-regex-valid">Regex</label>
                                        </span>
                                        </template>
                                    </p-card>
                                </template>
                                <template v-if="columnEdit.validator && columnEdit.validator.notNull">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            NotNull
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'notNull')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                        <template #content>
                                        </template>
                                    </p-card>
                                </template>
                                <template v-if="columnEdit.validator && columnEdit.validator.email">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            Email
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'email')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                    </p-card>
                                </template>
                                <template v-if="columnEdit.validator && columnEdit.validator.notBlank">
                                    <p-card class="validator-card mb-5">
                                        <template #title>
                                        <span class="p-buttonset">
                                            NotBlank
                                            <p-button icon="pi pi-trash" @click="onRemoveValidator($event, 'notBlank')"
                                                      class="p-button p-component p-button-icon-only p-button-rounded p-button-danger p-button-text button-remove-validator"></p-button>
                                        </span>
                                        </template>
                                    </p-card>
                                </template>
                            </template>
                        </div>
                        <!--  Если выбрана сущность   -->
                        <div class="ad-item" :hidden="selected != 'entity'">
                        <span class="p-float-label">
<!--                       @todo Если класс изменился нужно понимать какая сущность была изменена и на какаую (записывать старое имя) на backend пока не учтено-->
                            <p-inputtext id="ad-text-name" class="ad-text" type="text"
                                         v-model="entityEdit.class"></p-inputtext>
                            <label for="ad-text-name">Entity name</label>
                        </span>

                            <p-dialog v-model:visible="showRoleDialog" modal header="Role" position="left"
                                      :style="{ width: '20vw' }">
                                <p>
                                <div class="flex flex-column gap-2">
                                    <label for="username">Role name</label>
                                    <p-inputtext id="username" v-model="inputRole"
                                                 aria-describedby="username-help"/>
                                </div>
                                </p>
                                <template #footer>
                                    <p-button label="Add" icon="pi pi-check" @click="addRole()" autofocus/>
                                </template>
                            </p-dialog>
                            <p-card class="validator-card mt-5">
                                <template #title>
                                <span class="p-buttonset">
                                <span class="p-buttonset">
                                    GET
                                </span>
                                <p-button icon="pi pi-plus"
                                          class="p-button-rounded p-button-outlined button-add-role"
                                          @click="showRoleDialog = true">
                                </p-button>
                                </template>
                                <template #content>
                                <span class="p-float-label">
                                    <p-multiselect id="ad-item-multiselesct-role-get" class="ad-item-multiselesct"
                                                   v-model="entityEdit.roles.GET"
                                                   :options="roles"
                                                   placeholder="Select roles"
                                                   option-label="name"
                                                   option-value="systemName"
                                                   display="chip">
                                        <template #option="value">
                                            <div class="flex align-items-center gap-3">
                                                <span class="flex align-items-center gap-2">
                                                    <span class="font-semibold">[[value.option.name]]</span>
                                                </span>
                                                <p-button class="p-button-text"
                                                          @click="removeRole($event, 'GET', value.option.id, value.option.name)">
                                                    <i class="pi pi-times"></i>
                                                </p-button>
                                            </div>
                                        </template>
                                    </p-multiselect>
                                    <label for="ad-item-multiselesct-role-get">Roles can access</label>
                                </span>
                                </template>
                            </p-card>
                            <p-card class="validator-card mt-5">
                                <template #title>
                                <span class="p-buttonset">
                                    POST
                                </span>
                                    <p-button icon="pi pi-plus"
                                              class="p-button-rounded p-button-outlined button-add-role"
                                              @click="showRoleDialog = true">
                                    </p-button>
                                </template>
                                <template #content>
                                <span class="p-float-label">
                                    <p-multiselect id="ad-item-multiselesct-role-post" class="ad-item-multiselesct"
                                                   v-model="entityEdit.roles.POST" :options="roles"
                                                   placeholder="Select roles"
                                                   option-label="name"
                                                   option-value="systemName"
                                                   display="chip">
                                        <template #option="value">
                                            <div class="flex align-items-center gap-3">
                                                <span class="flex align-items-center gap-2">
                                                    <span class="font-semibold">[[value.option.name]]</span>
                                                </span>
                                                <p-button class="p-button-text"
                                                          @click="removeRole($event, 'POST', value.option.id, value.option.name)">
                                                    <i class="pi pi-times"></i>
                                                </p-button>
                                            </div>
                                        </template>
                                    </p-multiselect>
                                    <label for="ad-item-multiselesct-role-post">Roles can access</label>
                                </span>
                                </template>
                            </p-card>
                            <p-card class="validator-card mt-5">
                                <template #title>
                                <span class="p-buttonset">
                                    PUT
                                </span>
                                    <p-button icon="pi pi-plus"
                                              class="p-button-rounded p-button-outlined button-add-role"
                                              @click="showRoleDialog = true">
                                    </p-button>
                                </template>
                                <template #content>
                                <span class="p-float-label">
                                    <p-multiselect id="ad-item-multiselesct-role-put" class="ad-item-multiselesct"
                                                   v-model="entityEdit.roles.PUT" :options="roles"
                                                   placeholder="Select roles"
                                                   option-label="name"
                                                   option-value="systemName"
                                                   display="chip">
                                        <template #option="value">
                                            <div class="flex align-items-center gap-3">
                                                <span class="flex align-items-center gap-2">
                                                    <span class="font-semibold">[[value.option.name]]</span>
                                                </span>
                                                <p-button class="p-button-text"
                                                          @click="removeRole($event, 'PUT', value.option.id, value.option.name)">
                                                    <i class="pi pi-times"></i>
                                                </p-button>
                                            </div>
                                        </template>
                                    </p-multiselect>
                                    <label for="ad-item-multiselesct-role-put">Roles can access</label>
                                </span>
                                </template>
                            </p-card>
                            <p-card class="validator-card mt-5">
                                <template #title>
                                <span class="p-buttonset">
                                    DELETE
                                </span>
                                    <p-button icon="pi pi-plus"
                                              class="p-button-rounded p-button-outlined button-add-role"
                                              @click="showRoleDialog = true">
                                    </p-button>
                                </template>
                                <template #content>
                                <span class="p-float-label">
                                    <p-multiselect id="ad-item-multiselesct-role-delete" class="ad-item-multiselesct"
                                                   v-model="entityEdit.roles.DELETE" :options="roles"
                                                   placeholder="Select roles"
                                                   option-label="name"
                                                   option-value="systemName"
                                                   display="chip">
                                        <template #option="value">
                                            <div class="flex align-items-center gap-3">
                                                <span class="flex align-items-center gap-2">
                                                    <span class="font-semibold">[[value.option.name]]</span>
                                                </span>
                                                <p-button class="p-button-text"
                                                          @click="removeRole($event, 'DELETE', value.option.id, value.option.name)">
                                                    <i class="pi pi-times"></i>
                                                </p-button>
                                            </div>
                                        </template>
                                    </p-multiselect>
                                    <label for="ad-item-multiselesct-role-delete">Roles can access</label>
                                </span>
                                </template>
                            </p-card>

                        </div>
                        <!--  Если выбран модуль   -->
                        <div class="ad-item" :hidden="selected != 'module'">
                        <span class="p-float-label">
                            <p-inputtext id="ad-module-text-name" class="ad-text" type="text"
                                         v-model="moduleEdit.name"></p-inputtext>
                            <label for="ad-text-name">Module name</label>
                        </span>
                        </div>
                    </template>
                </p-card>
            </div>
            <div class="col-9">
                <div class="grid">
                    <template v-for="(moduleData, moduleName) in modules">
                        <div class="col-3">
                            <p-card role="region">
                                <template #title>
                                    <div @dblclick="onDubleclickModule($event, moduleData)" draggable="true">
                                        [[ moduleData.name ]]
                                    </div>
                                    <span style="font-size: 0.5em; font-weight: 300">Module name</span>
                                    <p-button class="p-panel-header-icon p-link mr-2" style="float: right"
                                              @click="moduleToggle($event, moduleName)">
                                        <span class="pi pi-cog"></span>
                                    </p-button>
                                </template>
                                <template #content>
                                    <template v-for="(entity, entityPosition) in moduleData.entity">
                                        <p-panel :toggleable="true" style="margin-bottom: 20px">
                                            <template #header>
                                                <div class="entity-title" draggable="true"
                                                     @dblclick="onDubleclickEntity($event, entity)">
                                                    <div class="short-entity-name">[[ entity.class ]]</div>
                                                </div>
                                            </template>
                                            <template #icons>
                                                <p-button class="p-panel-header-icon p-link mr-2"
                                                          @click="toggle($event, moduleName, entityPosition)">
                                                    <span class="pi pi-cog"></span>
                                                </p-button>
                                                <p-menu id="config_menu" :model="items" :popup="true"></p-menu>
                                            </template>
                                            <div class="entity-desc">
                                                <template v-for="(property, propertyPosition) in entity.properties">
                                                    <div draggable="true"
                                                         @dblclick="onDubleclickColumn($event, property, entity, moduleData, moduleName, entityPosition, propertyPosition)"
                                                         @drop="onDrop($event, propertyPosition)" @dragover.prevent
                                                         @dragenter.prevent
                                                         @dragstart="startDrag($event, property, moduleName, entityPosition, propertyPosition)"
                                                         class="entity-desc-item">
                                                        <i class="pi pi-list item-icon"></i>
                                                        <div class="entity-desc-text">
                                                            <span class="item-name" v-if="!!property">[[ property.name ]] ([[ property.column.type]])</span>
                                                            <span class="item-groups"
                                                                  v-if="!!property">[[ property.group ]]</span>
                                                        </div>
                                                    </div>
                                                </template>
                                            </div>
                                        </p-panel>
                                    </template>
                                </template>
                            </p-card>
                        </div>


                    </template>
                    <!--               Это костыль но пока работает оставляем  -->
                    <p-menu id="overlay_menu" ref="menu" :model="items" :popup="true"></p-menu>
                    <p-menu id="overlay_menu_module" ref="menuModule" :model="moduleItems" :popup="true"></p-menu>
                    <p-menu id="overlay_menu_setting" ref="menuSetting" :model="settingItems" :popup="true"></p-menu>
                    <p-menu id="overlay_menu_validator" ref="menuValidator" :model="validatorItems"
                            :popup="true"></p-menu>
                </div>
            </div>
        </div>
    </p-blockui>
</div>

<script>
    const {createApp, ref} = Vue;
    const Ripple = primevue.ripple;

    const App = {
        directives: {
            "ripple": Ripple
        },
        delimiters: ['[[', ']]'],
        setup() {
            const menu = ref(null);
            const menuModule = ref(null);
            const menuSetting = ref(null);
            const menuValidator = ref(null);

            const toggle = (event, moduleName, entityPosition) => {
                /** @todo вынести в методы и сделать так-же как при двойном клике сетить данные columnEdit и тд */
                menu.value.toggle(event);

                localStorage.moduleName = moduleName;
                localStorage.entityPosition = entityPosition;
            };
            const moduleToggle = (event, moduleName) => {
                menuModule.value.toggle(event);

                localStorage.moduleName = moduleName;
            };
            const settingToggle = (event, moduleName, entityPosition) => {
                localStorage.moduleName = moduleName;
                localStorage.entityPosition = entityPosition;

                menuSetting.value.toggle(event);
            };
            const validatorToggle = (event) => {
                menuValidator.value.toggle(event);
            };
            const val = ref(null);

            return {
                val,
                menu,
                menuModule,
                menuSetting,
                menuValidator,
                toggle,
                moduleToggle,
                settingToggle,
                validatorToggle,
            };
        },
        mounted() {
            this.getRoles()
            this.getModules()
            this.getGroups()
        },
        methods: {
            changeColumnType(e, columnEdit) {
                if (columnEdit.column.type === "") {
                    return;
                }

                let haveTargetEntity = [
                    'ManyToOne',
                    'ManyToMany',
                    'OneToOne',
                    'OneToMany',
                ];
                let haveMappedBy = [
                    'ManyToMany',
                    'OneToOne',
                ];

                if (!haveTargetEntity.includes(columnEdit.column.type)) {
                    this.columnEdit.column.nullable = true;
                    this.columnEdit.column = Object.keys(columnEdit.column).filter(key => key !== 'targetEntity').reduce((obj, key) => {
                            obj[key] = columnEdit.column[key];
                            return obj;
                        }, {}
                    );
                }
                if (!haveMappedBy.includes(columnEdit.column.type)) {
                    this.columnEdit.column = Object.keys(columnEdit.column).filter(key => key !== 'mappedBy').reduce((obj, key) => {
                            obj[key] = columnEdit.column[key];
                            return obj;
                        }, {}
                    );
                }

                let moduleName = localStorage.moduleName;
                let entityPosition = localStorage.entityPosition;
                let propertyPosition = localStorage.propertyPosition;

                /** Сбрасываем фильтр **/
                this.modules[moduleName]['entity'][entityPosition]['properties'][propertyPosition].validator = {};
            },
            removeRole(e, type, roleId, roleText) {
                e.stopImmediatePropagation();
                let isDelete = confirm(`Вы действительно хотите удалить роль: "${roleText}"`);
                let index = this.roles.findIndex(x => x.id === roleId);
                let role = this.roles[index];
                let entityEditRoleId = this.entityEdit.roles[type].findIndex(i => i === role.systemName)

                if (isDelete) {
                    if (entityEditRoleId > -1) {
                        if (this.entityEdit.roles[type].length === 1) {
                            this.entityEdit.roles[type] = [];
                        } else {
                            delete this.entityEdit.roles[type][entityEditRoleId];
                        }
                    }

                    this.roles.splice(index, 1);
                    this.deleteRoles(roleId);
                }
            },
            onDubleclickColumn(evt, column, entity, module, moduleName, entityPosition, propertyPosition) {
                //Данные нужны для удаления свойства сущности START
                localStorage.moduleName = moduleName;
                localStorage.entityPosition = entityPosition;
                localStorage.propertyPosition = propertyPosition;
                //END

                this.columnEdit = column;
                this.entityEdit = entity;
                this.moduleEdit = module;
                this.selected = 'column'
            },
            addRole() {
                let role = {
                    id: 0,
                    name: this.inputRole,
                }
                this.saveRole(role).then(resp => {
                    this.roles.push(resp.data.role);
                });

                this.inputRole = null;
                this.showRoleDialog = false;
            },
            onDubleclickEntity(evt, entity) {
                this.entityEdit = entity
                this.selected = 'entity'
            },
            onDubleclickModule(evt, module) {
                this.moduleEdit = module
                this.selected = 'module'
            },
            startDrag(evt, item, moduleName, entityPosition, propertyPosition) {
                evt.dataTransfer.dropEffect = 'move'
                evt.dataTransfer.effectAllowed = 'move'
                evt.dataTransfer.setData('moduleName', moduleName);
                evt.dataTransfer.setData('entityPosition', entityPosition);
                evt.dataTransfer.setData('propertyPosition', propertyPosition);
            },
            onRemoveColumn() {
                let moduleName = localStorage.moduleName;
                let entityPosition = localStorage.entityPosition;
                let propertyPosition = localStorage.propertyPosition;

                let prop = this.modules[moduleName]['entity'][entityPosition]['properties'].filter((i, k) => {
                    return k.toString() !== propertyPosition
                });
                this.modules[moduleName]['entity'][entityPosition]['properties'] = prop;
                this.selected = '';
            },
            onRemoveValidator(e, validatorName) {
                delete this.columnEdit.validator[validatorName];
            },
            onDrop(evt, position) {
                const moduleName = evt.dataTransfer.getData('moduleName');
                const entityPosition = evt.dataTransfer.getData('entityPosition');
                const propertyPosition = evt.dataTransfer.getData('propertyPosition');
                const item = this.modules[moduleName]['entity'][entityPosition]['properties'][propertyPosition];
                const item2 = this.modules[moduleName]['entity'][entityPosition]['properties'][position];
                this.modules[moduleName]['entity'][entityPosition]['properties'][position] = item;
                this.modules[moduleName]['entity'][entityPosition]['properties'][propertyPosition] = item2;
            },

            onSave() {
                /** @todo remove before relised **/
                console.log(JSON.stringify(this.modules));
                this.blockedApp = true;
                this.save(this.modules).then((result) => {
                    this.getModules();
                    this.blockedApp = false;
                });
            },

            async getRoles() {
                axios
                    .get('/elenyum/edit?r=get_roles')
                    .then(response => (this.roles = response.data.roles));
            },

            async deleteRoles(id) {
                return axios
                    .get('/elenyum/edit?r=del_role&id=' + id);
            },
            async getGroups() {
                axios
                    .get('/elenyum/edit?r=get_groups')
                    .then(response => (this.groups = response.data.groups));
            },
            async getTypes() {
                axios
                    .get('/elenyum/edit?r=get_types')
                    .then(response => (this.roles = response.data.roles));
            },
            async getModules() {
                axios
                    .get('/elenyum/edit?r=get_modules')
                    .then(response => {
                        this.modules = Object.assign({}, response.data.modules);
                    });
            },
            async deleteModule(moduleName) {
                return axios
                    .get('/elenyum/edit/?r=del_modules&module=' + moduleName);
            },
            async deleteEntity(moduleName, entityName) {
                return axios
                    .get('/elenyum/edit?r=del_entity&module=' + moduleName + '&entity=' + entityName);
            },
            saveRole(role) {
                return axios
                    .post('/elenyum/edit?r=add_role', role);
            },
            async save(data) {
                return axios
                    .post('/elenyum/edit?r=save', data);
                // .then(response => (this.modules = Object.assign({}, response.data.modules)));
            }
        },
        computed: {
            targetEntity() {
                let entityArray = [];
                if (this.moduleEdit && this.moduleEdit.entity) {
                    this.moduleEdit.entity.forEach((item) => {
                        if (item.class !== this.entityEdit.class) {
                            entityArray.push(item.class);
                        }
                    });
                }
                return entityArray
            },
            mappedBy() {
                let columns = [];
                if (this.moduleEdit && this.moduleEdit.entity) {
                    this.moduleEdit.entity.map((item) => {
                        if (item.class === this.columnEdit.column.targetEntity) {
                            item.properties.forEach((prop) => {
                                columns.push(prop.name);
                            })
                        }
                    });
                }

                return columns;
            },
            validatorItems() {
                if (this.columnEdit.validator === undefined || this.columnEdit.validator === null) {
                    this.columnEdit.validator = {};
                }
                let allItems = [
                    {
                        label: 'Regex',
                        name: 'regex',
                        forTypes: ['string'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.validator['regex'] = {
                                'pattern': ''
                            }
                        }
                    },
                    {
                        label: 'Count',
                        name: 'count',
                        forTypes: ['integer'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.validator['count'] = {
                                'pattern': ''
                            }
                        }
                    },
                    {
                        label: 'Length',
                        name: 'length',
                        forTypes: ['string'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.validator['length'] = {
                                'min': 0,
                                'max': 0,
                            }
                        }
                    },
                    {
                        label: 'NotNull',
                        name: 'notNull',
                        forTypes: ['string', 'integer'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.column['nullable'] = false;
                            this.columnEdit.validator['notNull'] = {};
                        }
                    },
                    {
                        label: 'Email',
                        name: 'email',
                        forTypes: ['string'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.validator['email'] = {}
                        }
                    },
                    {
                        label: 'NotBlank',
                        name: 'notBlank',
                        forTypes: ['string'],
                        icon: 'pi pi-plus-circle',
                        command: () => {
                            this.columnEdit.validator['notBlank'] = {}
                        }
                    },
                ];

                let items = allItems.filter((item) => (item.forTypes.length === 0 || item.forTypes.includes(this.columnEdit.column.type)) && !this.columnEdit.validator[item.name]);

                return [
                    {
                        label: 'Add validator',
                        items: items
                    },
                ]
            }
        },
        data() {
            return {
                blockedApp: false,
                inputRole: null,
                roles: [
                    // {
                    //     id: 1,
                    //     name: 'Администратор',
                    //     systemName: 'ROLE_ADMIN'
                    // },
                    // {
                    //     id: 2,
                    //     name: 'Менеджер',
                    //     systemName: 'ROLE_MANAGER'
                    // },
                ],
                showRoleDialog: false,
                moduleItems: [
                    {
                        label: 'Options',
                        items: [
                            {
                                label: 'Edit',
                                icon: 'pi pi-pencil',
                                command: (e) => {
                                    let moduleName = localStorage.moduleName;

                                    this.moduleEdit = this.modules[moduleName];
                                    this.selected = 'module';
                                }
                            },
                            {
                                label: 'Delete',
                                icon: 'pi pi-times',
                                command: () => {
                                    let moduleName = localStorage.moduleName;

                                    this.blockedApp = true;
                                    this.deleteModule(moduleName).then(() => {
                                        delete this.modules[moduleName];
                                        this.blockedApp = false;
                                    });
                                    this.selected = '';
                                }
                            },
                            {
                                label: 'Add entity',
                                icon: 'pi pi-plus-circle',
                                command: () => {
                                    let moduleName = localStorage.moduleName;
                                    let count = this.modules[moduleName]['entity'].length + 1;
                                    let newEntity = {
                                        class: 'NewClass_' + count,
                                        roles: {
                                            GET: [],
                                            POST: [],
                                            PUT: [],
                                            DELETE: []
                                        },
                                        properties: [
                                            {
                                                name: 'id',
                                                column: {
                                                    type: 'id',
                                                    nullable: false,
                                                },
                                                group: ['POST_RES', 'GET', 'LIST'],
                                                validator: {},
                                            }
                                        ]
                                    };
                                    this.modules[moduleName]['entity'].push(newEntity);
                                    //
                                    this.entityEdit = newEntity;
                                    this.selected = 'entity';
                                }
                            },
                        ]
                    },
                ],
                settingItems: [
                    {
                        label: 'Settings',
                        items: [
                            {
                                label: 'Add module',
                                icon: 'pi pi-plus-circle',
                                command: () => {
                                    let length = Object.keys(this.modules).length,
                                        code = Math.floor(Math.random() * 10000),
                                        moduleName = 'newModule_' + length + '' + code,
                                        newEntity = {
                                            class: 'Entity_' + moduleName,
                                            oldClassName: null,
                                            roles: {
                                                GET: [],
                                                POST: [],
                                                PUT: [],
                                                DELETE: []
                                            },
                                            properties: [
                                                {
                                                    name: 'id',
                                                    column: {
                                                        type: 'id',
                                                    },
                                                    group: ['POST_RES', 'GET', 'LIST'],
                                                    validator: {},
                                                }
                                            ]
                                        };

                                    this.modules[moduleName] = {
                                        name: moduleName,
                                        version: 'V1',
                                        entity: [
                                            newEntity
                                        ]
                                    };

                                    this.moduleEdit = this.modules[moduleName];
                                    this.selected = 'module';
                                    this.onSave()
                                }
                            },
                            {
                                label: 'Install',
                                icon: 'pi pi-download',
                                command: () => {
                                }
                            },
                            {
                                label: 'Export',
                                icon: 'pi pi-upload',
                                command: () => {
                                }
                            },
                        ]
                    },
                ],
                items: [
                    {
                        label: 'Options',
                        items: [
                            {
                                label: 'Edit',
                                icon: 'pi pi-pencil',
                                command: (e) => {
                                    let moduleName = localStorage.moduleName;
                                    let entityPosition = localStorage.entityPosition;

                                    this.entityEdit = this.modules[moduleName]['entity'][entityPosition];
                                    this.selected = 'entity'
                                }
                            },
                            {
                                label: 'Delete',
                                icon: 'pi pi-times',
                                command: () => {
                                    let moduleName = localStorage.moduleName;
                                    let entityPosition = localStorage.entityPosition;
                                    let entityName = this.modules[moduleName]['entity'][entityPosition].oldClassName;

                                    this.modules[moduleName]['entity'].splice(entityPosition, 1);
                                    this.selected = '';

                                    if (this.modules[moduleName]['entity'].length === 0) {
                                        let isDelete = confirm("Если вы удалите последнюю сущность то удалится модуль. Вы уверены что хотите удалить модуль?");
                                        if (isDelete) {
                                            this.blockedApp = true;
                                            this.deleteModule(moduleName).then(() => {
                                                delete this.modules[moduleName];
                                                this.blockedApp = false;
                                            });
                                        }
                                    } else {
                                        this.blockedApp = true;
                                        this.deleteEntity(moduleName, entityName).then(() => {
                                            this.blockedApp = false;
                                        });
                                    }
                                }
                            },
                            {
                                label: 'Add column',
                                icon: 'pi pi-plus-circle',
                                command: () => {
                                    let moduleName = localStorage.moduleName;
                                    let entityPosition = localStorage.entityPosition;

                                    let properties = this.modules[moduleName]['entity'][entityPosition]['properties'];
                                    let newColumn = {
                                        name: '',
                                        column: {
                                            type: 'string',
                                            nullable: true,
                                        },
                                        group: []
                                    };
                                    properties[properties.length] = newColumn;
                                    //
                                    this.moduleEdit = this.modules[moduleName];
                                    this.entityEdit = this.modules[moduleName]['entity'][entityPosition];
                                    this.columnEdit = newColumn;
                                    this.selected = 'column';
                                }
                            },
                        ]
                    },
                ],
                selected: '',
                result: {},
                modules: {
                    // "Content": {
                    //     "name": "Content",
                    //     "version": "V1",
                    //     "entity": [
                    //         {
                    //             "class": "News",
                    //             "oldClassName": null,
                    //             "roles": {
                    //                 "GET": [],
                    //                 "POST": [],
                    //                 "PUT": [],
                    //                 "DELETE": []
                    //             },
                    //             "properties": [
                    //                 {
                    //                     "name": "id",
                    //                     "column": {
                    //                         "type": "id",
                    //                         "nullable": false
                    //                     },
                    //                     "group": [
                    //                         "GET",
                    //                         "LIST",
                    //                         "POST_RES",
                    //                         "POST_REQ",
                    //                         "PUT_RES",
                    //                         "PUT_REQ",
                    //                         "DEL_RES"
                    //                     ],
                    //                     "validator": {
                    //                         "NotNull": {}
                    //                     }
                    //                 },
                    //                 {
                    //                     "name": "title",
                    //                     "column": {
                    //                         "type": "string",
                    //                         "nullable": true
                    //                     },
                    //                     "group": [
                    //                         "GET",
                    //                         "LIST",
                    //                         "POST_RES",
                    //                         "POST_REQ",
                    //                         "PUT_RES",
                    //                         "PUT_REQ",
                    //                         "DEL_RES"
                    //                     ],
                    //                     "validator": {}
                    //                 },
                    //                 {
                    //                     "name": "desc",
                    //                     "column": {
                    //                         "type": "text",
                    //                         "nullable": true
                    //                     },
                    //                     "group": [
                    //                         "GET",
                    //                         "LIST",
                    //                         "POST_RES",
                    //                         "POST_REQ",
                    //                         "PUT_RES",
                    //                         "PUT_REQ",
                    //                         "DEL_RES"
                    //                     ],
                    //                     "validator": {}
                    //                 },
                    //                 {
                    //                     "name": "category",
                    //                     "column": {
                    //                         "type": "ManyToOne",
                    //                         "nullable": true,
                    //                         "targetEntity": "Category"
                    //                     },
                    //                     "group": [
                    //                         "GET",
                    //                         "LIST",
                    //                         "POST_RES",
                    //                         "POST_REQ",
                    //                         "PUT_RES",
                    //                         "PUT_REQ",
                    //                         "DEL_RES"
                    //                     ],
                    //                     "validator": {}
                    //                 }
                    //             ]
                    //         },
                    //         {
                    //             "class": "Category",
                    //             "roles": {
                    //                 "GET": [],
                    //                 "POST": [],
                    //                 "PUT": [],
                    //                 "DELETE": []
                    //             },
                    //             "properties": [
                    //                 {
                    //                     "name": "id",
                    //                     "column": {
                    //                         "type": "id",
                    //                         "nullable": false
                    //                     },
                    //                     "group": [
                    //                         "POST_RES",
                    //                         "GET",
                    //                         "LIST"
                    //                     ],
                    //                     "validator": {}
                    //                 },
                    //                 {
                    //                     "name": "name",
                    //                     "column": {
                    //                         "type": "string",
                    //                         "nullable": true
                    //                     },
                    //                     "group": [
                    //                         "GET",
                    //                         "LIST",
                    //                         "POST_RES",
                    //                         "POST_REQ",
                    //                         "PUT_RES",
                    //                         "PUT_REQ",
                    //                         "DEL_RES"
                    //                     ],
                    //                     "validator": {}
                    //                 }
                    //             ]
                    //         }
                    //     ]
                    // }
                },
                groups: [
                    'GET',
                    'LIST',
                    'POST_RES',
                    'POST_REQ',
                    'PUT_RES',
                    'PUT_REQ',
                    'DEL_RES'
                ],
                columnEdit: {
                    name: '',
                    column: {
                        type: '',
                        nullable: true,
                    },
                    group: [],
                    validator: {},
                },
                entityEdit: {
                    class: '',
                    roles: {
                        GET: [],
                        POST: [],
                        PUT: [],
                        DELETE: []
                    }
                },
                moduleEdit: {
                    name: '',
                    version: ''
                },
                types: [
                    'id',
                    'binary',
                    'blob',
                    'boolean',
                    'date',
                    'time',
                    'datetime',
                    'decimal',
                    'float',
                    'guid',
                    'integer',
                    'json',
                    'string',
                    'text',
                    'ManyToMany',
                    'ManyToOne',
                    'OneToOne',
                    // 'OneToMany'
                ]
            }
        },
        components: {
            'p-slider': primevue.slider,
            'p-multiselect': primevue.multiselect,
            'p-dropdown': primevue.dropdown,
            "p-inputtext": primevue.inputtext,
            "p-card": primevue.card,
            "p-panel": primevue.panel,
            "p-divider": primevue.divider,
            "p-menu": primevue.menu,
            "p-button": primevue.button,
            "p-tag": primevue.tag,
            "p-dialog": primevue.dialog,
            "p-blockui": primevue.blockui
        }
    };

    createApp(App).use(primevue.config.default, {ripple: true}).mount("#app");
</script>
</body>
</html>