<?php

namespace Module\User\V1\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Elenyum\ApiDocBundle\Entity\AllowInterface;
use Elenyum\ApiDocBundle\Entity\BaseEntity;
use DateTimeImmutable;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Module\User\V1\Repository\UserRepository;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\Validator\Constraints as Assert;
use OpenApi\Attributes as OA;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\Table(name: 'users')]
#[UniqueEntity(
    fields: ['email'],
    message: 'Is already in use on that email.',
    errorPath: 'email'
)]
class User extends BaseEntity implements PasswordAuthenticatedUserInterface, UserInterface, AllowInterface
{
    public const STATUS_NEW = 10;
    public const STATUS_CONFIRMED = 20;
    public const STATUS_BLOCKED = 30;

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: Types::INTEGER)]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    private int $id;

    #[ORM\Column(type: Types::STRING, length: 200)]
    #[Assert\Length(min: 3, max: 200)]
    #[Assert\NotBlank]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    private string $name;

    #[ORM\Column(type: Types::STRING, length: 180, unique: true)]
    #[Assert\Length(min: 5, max: 180)]
    #[Assert\NotBlank]
    #[Assert\Email]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    #[OA\Property(type: 'string', example: 'you@email.com')]
    private ?string $email = null;

    #[Assert\NotBlank]
    #[ORM\Column(type: Types::INTEGER, nullable: false)]
    #[Assert\Choice(choices: [self::STATUS_NEW, self::STATUS_CONFIRMED, self::STATUS_BLOCKED])]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    private int $status;

    #[Assert\NotBlank]
    #[Assert\Length(min: 5, max: 20)]
    #[ORM\Column(type: Types::STRING, length: 20, unique: true)]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    private string $phone;

    #[Assert\NotBlank]
    #[ORM\Column(type: Types::STRING, length: 255)]
    #[Groups(['POST_REQ'])]
    private string $password;

    #[Assert\Length(min: 20, max: 255)]
    #[ORM\Column(type: Types::STRING, length: 255, nullable: true)]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
        BaseEntity::TYPE_DEL_RES,
    ])]
    private string $address;

    #[ORM\Column(type: Types::DATETIME_IMMUTABLE)]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_POST_RES,
    ])]
    private DateTimeImmutable $createdAt;

    #[ORM\Column(type: Types::DATETIME_IMMUTABLE, nullable: true)]
    #[Groups([
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_LIST,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_POST_RES,
    ])]
    private ?DateTimeImmutable $updatedAt = null;

    #[ORM\JoinTable(name: 'users_roles')]
    #[ORM\JoinColumn(name: 'user_id', referencedColumnName: 'id')]
    #[ORM\InverseJoinColumn(name: 'role_id', referencedColumnName: 'id', unique: false)]
    #[ORM\ManyToMany(targetEntity: Role::class, cascade: ['persist'])]
    #[Groups(['GET', 'PUT_RES', 'POST_RES', 'POST_REQ', 'PUT_REQ'
        BaseEntity::TYPE_GET,
        BaseEntity::TYPE_PUT_RES,
        BaseEntity::TYPE_PUT_REQ,
        BaseEntity::TYPE_POST_RES,
        BaseEntity::TYPE_POST_REQ,
    ])]
    private Collection $roles;

    public function __construct()
    {
        $this->roles = new ArrayCollection();
        $this->setStatus(self::STATUS_NEW);
        $this->setCreatedAt(new DateTimeImmutable());
    }

    /**
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * @param int $id
     */
    public function setId(int $id): void
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * @param string $email
     */
    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    /**
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }

    /**
     * @return int
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * @param int $status
     */
    public function setStatus(int $status): void
    {
        $this->status = $status;
    }

    /**
     * @return string
     */
    public function getPhone(): string
    {
        return $this->phone;
    }

    /**
     * @param string $phone
     */
    public function setPhone(string $phone): void
    {
        $this->phone = $phone;
    }

    /**
     * @return string
     */
    public function getAddress(): string
    {
        return $this->address;
    }

    /**
     * @param string $address
     */
    public function setAddress(string $address): void
    {
        $this->address = $address;
    }

    /**
     * @return string
     */
    public function getCreatedAt(): DateTimeImmutable
    {
        return $this->createdAt;
    }

    /**
     * @param DateTimeImmutable $createdAt
     */
    public function setCreatedAt(DateTimeImmutable $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * @return ?DateTimeImmutable
     */
    public function getUpdatedAt(): ?DateTimeImmutable
    {
        return $this->updatedAt;
    }

    /**
     * @param DateTimeImmutable $updatedAt
     */
    public function setUpdatedAt(DateTimeImmutable $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * @param string $password
     */
    public function setPassword(string $password): void
    {
        $this->password = $password;
    }

    public function getRoles(): array
    {
        $roles = $this->roles;

        return $roles->toArray();
    }

    /**
     * @param Role[] $roles
     * @return void
     */
    public function setRoles(array $roles): void
    {
        $this->roles->clear();
        foreach ($roles as $role) {
            if ($this->roles->contains($role)) {
                return;
            }
            $this->roles->add($role);
        }
    }

    public function getSalt(): string
    {
        return '_ELENYUM_';
    }

    public function eraseCredentials(): void
    {
        // TODO: Implement eraseCredentials() method.
    }

    public function getUserIdentifier(): string
    {
        return $this->getEmail();
    }

    public function isAllow(UserInterface $user, string $type): bool
    {
        // Пользователь может менять свои данные
        // Пользователь со своей записью может делать всё
        // Если не может удалять то нужно возвращать false если $type = DELETE
        if ($this->getUserIdentifier() === $user->getUserIdentifier()) {
            return true;
        }

        return false;
    }
}