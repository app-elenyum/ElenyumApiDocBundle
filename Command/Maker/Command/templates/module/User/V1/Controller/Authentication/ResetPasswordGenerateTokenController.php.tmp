<?php

namespace Module\User\V1\Controller\Authentication;

use Elenyum\ApiDocBundle\Controller\BaseController;
use Exception;
use Module\User\V1\Entity\User;
use Module\User\V1\Event\UserBeforeResetEvent;
use Module\User\V1\Service\UserService;
use Elenyum\ApiDocBundle\Annotation\Security;
use OpenApi\Attributes as OA;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\Exception\TooManyPasswordRequestsException;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;

#[OA\RequestBody(
    description: '(step 1) Get token for reset password',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'username', type: 'string', example: 'you@email.com'),
        ]
    )
)]
#[OA\Response(
    response: 200,
    description: 'Response token for reset password',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: true),
            new OA\Property(property: 'code', type: 'integer', default: 200),
            new OA\Property(property: 'token', type: 'string', example: 'gLSjTQZP0zCbBGtwdqGcxNxyIjn4kOZaIpc57PAz'),
            new OA\Property(property: 'expiresAt', type: 'string', format: 'datetime', example: '2022-12-27T13:58:56+00:00'),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'string'),
        ]
    )
)]
#[OA\Response(
    response: 401,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'error', type: 'string'),
        ]
    )
)]
#[Security(name: null)]
#[OA\Tag(name: 'Authentication')]
#[Route(
    path: '/v1/user/generate-token',
    name: 'userResetGenerateToken',
    methods: [
        Request::METHOD_POST,
    ])
]
class ResetPasswordGenerateTokenController extends BaseController
{
    use ResetPasswordControllerTrait;

    public function __construct(
        private readonly ResetPasswordHelperInterface $resetPasswordHelper
    ) {
    }

    /**
     * @param Request $request
     * @param UserService $service
     * @param string|null $token
     * @return Response
     * @throws ResetPasswordExceptionInterface
     */
    final public function __invoke(Request $request, UserService $service, ?string $token): Response
    {
        try {
            $content = json_decode($request->getContent(), true, 512,JSON_OBJECT_AS_ARRAY);
            $username = $content['username'];

            if ($username === null) {
                throw new Exception('User not found');
            }
            $user = $service->getRepository(User::class)?->findOneBy([
                'email' => $username,
            ]);

            if (!$user instanceof User) {
                throw new Exception('Undefined user by email: '.$username);
            }

            $resetToken = $this->resetPasswordHelper->generateResetToken($user);
            $token = $resetToken->getToken();

            /** EVENT START */
            $eventBeforeReset = new UserBeforeResetEvent($user, $resetToken);
            $service->getEventDispatcher()->dispatch($eventBeforeReset, UserBeforeResetEvent::NAME);
            /** EVENT END */

            // Store the token object in session for retrieval in check-email route.
            $this->setTokenObjectInSession($resetToken);

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'token' => $token,
                'expiresAt' => $resetToken->getExpiresAt()->format(DATE_ATOM),
            ]);
        } catch (TooManyPasswordRequestsException $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => 'Token available at: ' . $e->getAvailableAt()->format(DATE_ATOM) . ' you can`t request other token',
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}