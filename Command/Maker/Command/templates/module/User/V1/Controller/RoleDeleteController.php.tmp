<?php

namespace Module\User\V1\Controller;

use Elenyum\ApiDocBundle\Annotation\Model;
use Elenyum\ApiDocBundle\Annotation\Security;
use Elenyum\ApiDocBundle\Controller\BaseController;
use Elenyum\ApiDocBundle\Entity\BaseEntity;
use Elenyum\ApiDocBundle\Exception\UndefinedEntity;
use Elenyum\ApiDocBundle\Repository\GetItemForDeleteInterface;
use Exception;
use Module\User\V1\Entity\Role;
use Module\User\V1\Service\RoleService;
use OpenApi\Attributes as OA;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[OA\Response(
    response: 200,
    description: 'Model content',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: true),
            new OA\Property(property: 'code', type: 'integer', default: 200),
            new OA\Property(
                property: 'items',
                ref: new Model(type: Role::class, groups: ['DEL_RES'])
            ),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer', example: "Entity not found"),
        ]
    )
)]
#[OA\Parameter(
    name: 'id',
    description: 'can int or array',
    in: 'path',
    schema: new OA\Schema(type: 'object'),
    example: [1,2,3]
)]
#[Security(name: null)]
#[OA\Tag(name: 'User', description: 'Delete a REST API resource')]
#[Route('/v1/user/role/{id}', name: 'contentRoleDelete', methods: Request::METHOD_DELETE)]
class RoleDeleteController extends BaseController
{
    final public function __invoke(string $id, RoleService $service): Response
    {
        try {
            $repository = $service->getRepository();
            if (!$repository instanceof GetItemForDeleteInterface) {
                throw new Exception('Repository not implements GetItemForDeleteInterface');
            }
            $allId = explode(',', $id);

            $items = $repository->getItemsForDelete($allId);
            if (empty($items)) {
                throw new UndefinedEntity(Role::class, $id);
            }
            $entity = $items[0];

            $deletedItems = [];
            foreach ($items as $item) {
                if ($item instanceof BaseEntity) {
                    //Check access
                    $this->denyAccessUnlessGranted('DELETE', $item);
                    $deletedItems[] = $item->toArray('DEL_RES');
                    $service->getEntityManager()->remove($item);
                } else {
                    throw new UndefinedEntity(Role::class . ' or not extend BaseEntity');
                }
            }
            $service->getEntityManager()->flush();

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'items' => $deletedItems,
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }

}