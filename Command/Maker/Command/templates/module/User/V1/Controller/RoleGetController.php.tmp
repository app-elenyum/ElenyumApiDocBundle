<?php

namespace Module\User\V1\Controller;

use Elenyum\ApiDocBundle\Annotation\Model;
use Elenyum\ApiDocBundle\Annotation\Security;
use Elenyum\ApiDocBundle\Controller\BaseController;
use Elenyum\ApiDocBundle\Entity\BaseEntity;
use Elenyum\ApiDocBundle\Exception\UndefinedEntity;
use Elenyum\ApiDocBundle\Repository\GetItemInterface;
use Exception;
use Module\User\V1\Entity\Role;
use Module\User\V1\Service\RoleService;
use OpenApi\Attributes as OA;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[OA\Response(
    response: 200,
    description: 'Get item content by id',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: true),
            new OA\Property(property: 'code', type: 'integer', default: 200),
            new OA\Property(
                property: 'item',
                ref: new Model(type: Role::class, groups: ['GET'])
            ),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer'),
        ]
    )
)]
#[Security(name: null)]
#[OA\Tag(name: 'User')]
#[Route(path: '/v1/user/role/{id<\d+>}', name: 'contentRoleGet', methods: Request::METHOD_GET)]
class RoleGetController extends BaseController
{
    final public function __invoke(int $id, RoleService $service): Response
    {
        try {
            $repository = $service->getRepository();
            if (!$repository instanceof GetItemInterface) {
                throw new Exception('Repository not implements GetItemInterface');
            }
            $entity = $repository->getItem($id);
            //Check access
            $this->denyAccessUnlessGranted('GET', $entity);

            if (!$entity instanceof BaseEntity) {
               throw new UndefinedEntity(Role::class . ' or not extend BaseEntity', $id);
            }

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'item' => $entity->toArray('GET'),
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}