<?php

namespace Module\User\V1\Controller\Authentication;

use Elenyum\ApiDocBundle\Controller\BaseController;
use Exception;
use Module\User\V1\Entity\User;
use Module\User\V1\Service\UserService;
use Elenyum\ApiDocBundle\Annotation\Security;
use OpenApi\Attributes as OA;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;

#[OA\Response(
    response: 200,
    description: '(step 2) Reset password if correct token',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: true),
            new OA\Property(property: 'code', type: 'integer', default: 200),
            new OA\Property(property: 'message', type: 'string'),
            new OA\Property(
                property: 'user',
                properties: [
                    new OA\Property(property: 'id', type: 'integer'),
                    new OA\Property(property: 'email', type: 'string'),
                ]
            ),
        ]
    )
)]
#[OA\RequestBody(
    description: 'Model user for login data',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'password', type: 'string'),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'string'),
        ]
    )
)]
#[OA\Response(
    response: 401,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'error', type: 'string'),
        ]
    )
)]
#[Security(name: null)]
#[OA\Tag(name: 'Authentication')]
#[Route(
    path: '/v1/user/reset/{token}',
    name: 'userReset',
    methods: [Request::METHOD_POST]
)]
class ResetPasswordController extends BaseController
{
    use ResetPasswordControllerTrait;

    public function __construct(
        private readonly ResetPasswordHelperInterface $resetPasswordHelper
    ) {
    }

    /**
     * @param Request $request
     * @param UserService $service
     * @param string|null $token
     * @return Response
     * @throws ResetPasswordExceptionInterface
     */
    final public function __invoke(Request $request, UserService $service, ?string $token): Response
    {
        try {
            $content = json_decode($request->getContent(), true, 512,JSON_OBJECT_AS_ARRAY);
            if (!is_array($content)) {
                throw new Exception('Can`t decode content');
            }
            if ($token === null) {
                throw new Exception('Token is null');
            }

            $password = $content['password'];
            $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);

            if (!$user instanceof User) {
                throw new Exception('Undefined user');
            }
            $user->setPassword($password);
            $service->hashPassword($user);
            $service->getEntityManager()->flush();

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'message' => 'password changed',
                'user' => [
                    'id' => $user->getId(),
                    'email' => $user->getEmail(),
                ],
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}