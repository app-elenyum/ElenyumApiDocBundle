<?php

namespace Module\{%uModuleName%}\V1\Controller;

use Elenyum\ApiDocBundle\Controller\BaseController;
use Elenyum\ApiDocBundle\Validator\ValidationException;
use Exception;
use Elenyum\ApiDocBundle\Exception\UndefinedEntity;
use Elenyum\ApiDocBundle\Entity\BaseEntity;
use Module\{%uModuleName%}\V1\Entity\{%entityName%};
use Module\{%uModuleName%}\V1\Service\{%entityName%}Service;
use Elenyum\ApiDocBundle\Annotation\Model;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Elenyum\ApiDocBundle\Annotation\Security;
use OpenApi\Attributes as OA;

//POST - Create a REST API resource
#[OA\RequestBody(
    description: 'Model {%lModuleName%} for add data',
    content: new OA\JsonContent(
        ref: new Model(type: {%entityName%}::class, groups: ['POST_REQ'])
    )
)]
#[OA\Response(
    response: 200,
    description: 'Returns error if invalid data',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(
                property: 'item',
                ref: new Model(type: {%entityName%}::class, groups: ['POST_RES'])
            ),
        ]
    )
)]
#[OA\Response(
    response: 400,
    description: 'Returns error if invalid data',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer'),
            new OA\Property(property: 'errors', type: 'array', items: new OA\Items(type: 'string'))
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer'),
        ]
    )
)]
#[Security(name: null)]
#[OA\Tag(name: '{%uModuleName%}')]
#[Route(path: '/{%version%}/{%lModuleName%}/{%lEntityName%}', name: '{%lModuleName%}{%entityName%}Post', methods: Request::METHOD_POST)]
class {%entityName%}PostController extends BaseController
{
    /**
     * @throws Exception
     */
    final public function __invoke(Request $request, {%entityName%}Service $service): Response
    {
        try {
            //Check access
            $entity = $service->getEntityObject();
            $item = $service->toEntity($request->getContent());
            $this->denyAccessUnlessGranted('POST', $item);
            if (!$item instanceof BaseEntity) {
               throw new UndefinedEntity({%entityName%}::class . ' or not extend BaseEntity');
            }
            $service->getEntityManager()->persist($item);
            $service->getEntityManager()->flush();

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'item' => $item->toArray('POST_RES'),
            ]);
        } catch (ValidationException $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
                'errors' => json_decode($e->getMessage()),
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}