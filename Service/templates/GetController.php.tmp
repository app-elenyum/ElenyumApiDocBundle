<?php

namespace Module\{%uModuleName%}\V1\Controller;

use Elenyum\ApiDocBundle\Controller\BaseController;
use Elenyum\ApiDocBundle\Repository\GetItemInterface;
use Exception;
use Elenyum\ApiDocBundle\Exception\UndefinedEntity;
use Elenyum\ApiDocBundle\Entity\BaseEntity;
use Module\{%uModuleName%}\V1\Entity\{%entityName%};
use Module\{%uModuleName%}\V1\Service\{%entityName%}Service;
use Elenyum\ApiDocBundle\Annotation\Model;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Elenyum\ApiDocBundle\Annotation\Security;
use OpenApi\Attributes as OA;

#[OA\Response(
    response: 200,
    description: 'Get item {%lModuleName%} by id',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: true),
            new OA\Property(property: 'code', type: 'integer', default: 200),
            new OA\Property(
                property: 'item',
                ref: new Model(type: {%entityName%}::class, groups: ['GET'])
            ),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer'),
        ]
    )
)]
#[OA\Parameter(
    name: 'field',
    in: 'query',
    schema: new OA\Schema(type: 'string'),
    example: 'id,title'
)]
#[Security(name: null)]
#[OA\Tag(name: '{%uModuleName%}')]
#[Route(path: '/{%version%}/{%lModuleName%}/{%lEntityName%}/{id<\d+>}', name: '{%lModuleName%}{%entityName%}Get', methods: Request::METHOD_GET)]
class {%entityName%}GetController extends BaseController
{
    final public function __invoke(int $id, {%entityName%}Service $service): Response
    {
        $entity = $service->getEntityObject();
        $this->checkAccess($entity, 'get');

        try {
            $repository = $service->getRepository();
            if (!$repository instanceof GetItemInterface) {
                throw new Exception('Repository not implements GetItemInterface');
            }
            $field = empty($request->query->get('field')) ? [] : explode(',', $request->query->get('field'));
            $data = $repository->getItem($id, $field);

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'item' => Paginator::transformArray($data),
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}