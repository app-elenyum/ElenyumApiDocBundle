<?php

namespace Module\{%uModuleName%}\V1\Controller;

use Elenyum\ApiDocBundle\Controller\BaseController;
use Elenyum\ApiDocBundle\Annotation\PaginatorAnnotation;
use Elenyum\ApiDocBundle\Repository\PaginatorInterface;
use Exception;
use Module\{%uModuleName%}\V1\Entity\{%entityName%};
use Module\{%uModuleName%}\V1\Service\{%entityName%}Service;
use Elenyum\ApiDocBundle\Annotation\Model;
use Elenyum\ApiDocBundle\Annotation\Security;
use OpenApi\Attributes as OA;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[OA\Response(
    response: 200,
    description: 'Returns list the model {%lModuleName%}',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean'),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(
                property: 'paginator',
                ref: new Model(type: PaginatorAnnotation::class)
            ),
            new OA\Property(
                property: 'items',
                type: 'array',
                items: new OA\Items(ref: new Model(type: {%entityName%}::class, groups: ["LIST"]))
            ),
        ]
    )
)]
#[OA\Response(
    response: 417,
    description: 'Returns error',
    content: new OA\JsonContent(
        properties: [
            new OA\Property(property: 'success', type: 'boolean', default: false),
            new OA\Property(property: 'code', type: 'integer'),
            new OA\Property(property: 'message', type: 'integer'),
        ]
    )
)]
#[OA\Parameter(
    name: 'limit',
    in: 'query',
    required: true,
    schema: new OA\Schema(type: 'integer'),
    example: 10,
)]
#[OA\Parameter(
    name: 'offset',
    in: 'query',
    required: true,
    schema: new OA\Schema(type: 'integer'),
    example: 0,
)]
#[OA\Parameter(
    name: 'filter',
    in: 'query',
    schema: new OA\Schema(type: 'string'),
    example: '{"id": {"<": "36"}, "name": {"=": "algo"}}'
)]
#[OA\Parameter(
    name: 'sort',
    in: 'query',
    schema: new OA\Schema(type: 'string'),
    example: '+id,-name'
)]
#[Security(name: null)]
#[OA\Tag(name: '{%uModuleName%}')]
#[Route(path: '/{%version%}/{%lModuleName%}/{%lEntityName%}', name: '{%lModuleName%}{%entityName%}List', methods: Request::METHOD_GET)]
class {%entityName%}ListController extends BaseController
{
    final public function __invoke(Request $request, {%entityName%}Service $service): Response
    {
        $entity = $service->getEntityObject();
        $this->checkAccess($entity, 'get');

        try {
            $repository = $service->getRepository();
            if (!$repository instanceof PaginatorInterface) {
                throw new Exception('Repository not implements PaginatorInterface');
            }

            $paginator = $repository->getPaginator($this->getRestParams($request));

            return $this->json([
                'success' => true,
                'code' => Response::HTTP_OK,
                'paginator' => [
                    'first' => 1,
                    'next' => $paginator->getNextPage(),
                    'previous' => $paginator->getPreviousPage(),
                    'last' => $paginator->getLastPage(),
                    'current' => $paginator->getCurrentPage(),
                ],
                'items' => $paginator->getResults(),
            ]);
        } catch (Exception $e) {
            return $this->json([
                'success' => false,
                'code' => Response::HTTP_EXPECTATION_FAILED,
                'message' => $e->getMessage(),
            ]);
        }
    }
}